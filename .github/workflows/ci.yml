name: Url Shortener CI/CD

on:
  push:
    branches: [ "master"]
  pull_request:
    branches: [ "master"]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/url-shortener
  DOCKER_TAG: ${{ github.sha }}

jobs:
  test:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check Python version
        run: python --version

      - name: Clear pip cache
        run: pip cache purge || true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black Formatter
        run: |
          black . --check

      - name: Run Flake8 Linter
        run: |
          flake8 .

      - name: Run tests
        env:
          DJANGO_SETTINGS_MODULE: url_shortener.settings
          DATABASE_URL: sqlite:///db.sqlite3
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          FRONTEND_URL: http://localhost:8000
          BASE_URL: http://localhost:8000
        run: |
          python manage.py migrate
          pytest --cov=. --cov-branch --cov-report=xml

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and Push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }},${{ env.DOCKER_IMAGE }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
          wait-for-success: true

      - name: Run Migrations
        run: |
          echo "Running database migrations..."
          curl -X POST https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"command": "python manage.py migrate"}'
